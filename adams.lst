# file opened: adams.asm
 1    0000                  device	zxspectrum48
 2    0000
 3    0000                  include "screen_lib.asm"
# file opened: screen_lib.asm
 1+   0000 ~            /*
 2+   0000 ~              screen_lib
 3+   0000 ~              Contains helper procedures for screen operations.
 4+   0000 ~            */
 5+   0000
 6+   0000                  module screen
 7+   0000
 8+   0000              ; clears whole screen with 0 value
 9+   0000              clear:
10+   0000 C5               push bc
11+   0001 D5               push de
12+   0002 E5               push hl
13+   0003 21 00 40         ld hl,$4000     ; HL = start of screen bitmap
14+   0006 11 01 40         ld de,$4001     ; DE = HL + 1
15+   0009 01 FF 17         ld bc,$17FF     ; BC = length of screen bitmap ($4000 - $57FF)
16+   000C 36 00            ld (hl),0       ; clear
17+   000E ED B0            ldir            ; LDI while BC>0, LDI: (DE)=(HL), DE++, HL++, BC--
18+   0010 E1               pop hl
19+   0011 D1               pop de
20+   0012 C1               pop bc
21+   0013 C9               ret
22+   0014
23+   0014                  endmodule
24+   0014
# file closed: screen_lib.asm
 4    0014
 5    0014              ; const
 6    0014              ENTER = $0D
 7    0014
 8    0014                  org $8000
 9    8000 C3 10 80         jp start
10    8003
11    8003              data:
12    8003 48 65 6C 6C      db "Hello World!",ENTER
12    8007 6F 20 57 6F
12    800B 72 6C 64 21
12    800F 0D
13    8010              DATA_LENGTH = $ - data
14    8010
15    8010              start:
16    8010 CD 00 00         call screen.clear
17    8013 21 03 80         ld hl,data
18    8016 06 0D            ld b,DATA_LENGTH
19    8018              print_loop:
20    8018 7E               ld a,(hl)
21    8019 D7               rst $10
22    801A 23               inc hl
23    801B 10 FB            djnz print_loop
24    801D C9               ret
25    801E
26    801E                  savesna "adams.sna",start
27    801E
# file closed: adams.asm
