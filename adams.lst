# file opened: adams.asm
 1    0000                  device	zxspectrum48
 2    0000
 3    0000              ; const
 4    0000              ENTER = $0D
 5    0000
 6    0000                  org $8000
 7    8000                  include "screen_lib.asm"
# file opened: screen_lib.asm
 1+   8000              ; screen_lib
 2+   8000              ; contains helper procedures for screen operations
 3+   8000              ; screen addresses
 4+   8000              ; $4000 : top third
 5+   8000              ; $4800 : middle
 6+   8000              ; $4000 : bottom
 7+   8000              ; counter
 8+   8000              ; $07FF : one third
 9+   8000              ; $0FFF : two thirds
10+   8000              ; $17FF ; whole screen
11+   8000              ; (1) Machinencode-Programme fÃ¼r den ZX Spectrum, Davie Laine
12+   8000              ; (2) Advanced Spectrum Machine Language, David Webb
13+   8000
14+   8000                  module screen
15+   8000
16+   8000              ; calculates address of a cell
17+   8000              ; from (2), page 6
18+   8000              ; in: B = line (0-23)
19+   8000              ; in: C = column (0-31)
20+   8000              ; out: HL = address in display
21+   8000              ; preserved: BC, DE
22+   8000              get_loc:
23+   8000 78               ld a,b
24+   8001 E6 F8            and $F8         ; %11111000
25+   8003 C6 40            add $40         ; %01000000
26+   8005 67               ld h,a
27+   8006 78               ld a,b
28+   8007 E6 07            and $7          ; %00000111
29+   8009 0F               rrca
30+   800A 0F               rrca
31+   800B 0F               rrca
32+   800C 81               add a,c
33+   800D 6F               ld l,a
34+   800E C9               ret
35+   800F
36+   800F              ; clears whole screen with 0 value
37+   800F              ; from (1), page 56 and (2) page 7
38+   800F              clear:
39+   800F D5               push de
40+   8010 C5               push bc
41+   8011 E5               push hl
42+   8012 21 00 40         ld hl,$4000     ; HL = start of screen bitmap
43+   8015 54               ld d,h          ; DE = HL + 1, probably better than ld de,$4001
44+   8016 1E 01            ld e,1
45+   8018 01 FF 17         ld bc,$17FF     ; BC = length of screen bitmap ($4000 - $57FF)
46+   801B 75               ld (hl),l       ; (since l=0) clear, faster and occupies less memory than ld (hl),0
47+   801C ED B0            ldir            ; LDI while BC>0, LDI: (DE)=(HL), DE++, HL++, BC--
48+   801E E1               pop hl
49+   801F C1               pop bc
50+   8020 D1               pop de
51+   8021 C9               ret
52+   8022
53+   8022                  endmodule
54+   8022
# file closed: screen_lib.asm
 8    8022                  include "webb_lib.asm"
# file opened: webb_lib.asm
 1+   8022              ; (1) Super Charge Your Spectrum, David Webb
 2+   8022
 3+   8022                  include "consts_lib.asm"
# file opened: consts_lib.asm
 1++  8022                  module consts
 2++  8022
 3++  8022              ; screen bitmap 256x192, 6kB
 4++  8022              SCREEN_BITMAP_RAM_START = $4000
 5++  8022              SCREEN_BITMAP_RAM_END = $57ff
 6++  8022
 7++  8022              ; screen color attributes 32x24, 768B
 8++  8022              SCREEN_COLOR_RAM_START = $5800
 9++  8022              SCREEN_COLOR_RAM_END = $5aff
10++  8022
11++  8022              ; printer buffer
12++  8022              PRINTER_BUFFER = $5be0
13++  8022
14++  8022              TEST_23346 = $5b32
15++  8022              TEST_23347 = $5b33
16++  8022
17++  8022                  endmodule
# file closed: consts_lib.asm
 4+   8022
 5+   8022                  module webb
 6+   8022
 7+   8022              ; upws - up whole screen
 8+   8022              ; (1) page 45
 9+   8022              ; modifies: hl,de
10+   8022              upws:
11+   8022 21 00 40         ld      hl,consts.SCREEN_BITMAP_RAM_START       ; beginning of display RAM
12+   8025 11 E0 5B         ld      de,consts.PRINTER_BUFFER                ; used to erase the contents of the last 32 bytes of the printer buffer
13+   8028              nxslice:
14+   8028 D5               push    de      ; destination
15+   8029 E5               push    hl      ; source
16+   802A 3E 03            ld      a,3     ; three parts of the screen
17+   802C 01 20 00         ld      bc,$20  ; counter
18+   802F              nxthird:
19+   802F C5               push    bc      ; store the top 'slice' of the top line in the printer buffer
20+   8030 E5               push    hl
21+   8031 ED B0            ldir            ; do ldi while bc>0, ldi: (de)=(hl), de++, hl++, bc--
22+   8033 D1               pop     de
23+   8034 0E E0            ld      c,$e0   ; 7*32=224
24+   8036 ED B0            ldir            ; next 7 lines (1-7) up into top 7 lines (0-6)
25+   8038 06 07            ld      b,7
26+   803A 09               add     hl,bc   ; find the first line of the next third of the screen
27+   803B 3D               dec     a       ; repeat until all of the top slices have been scrolled up a line
28+   803C C1               pop     bc
29+   803D 20 F0            jr      nz,nxthird
30+   803F 3A 32 5B         ld      a,(consts.TEST_23346)   ; test
31+   8042 FE 01            cp      1           ; decide whether to
32+   8044 38 10            jr      c,leavit    ; leave,
33+   8046 20 07            jr      nz,fill     ; fill or
34+   8048              roll:
35+   8048 21 E0 5B         ld      hl,consts.PRINTER_BUFFER ; roll the top slice down into the bottom line
36+   804B ED B0            ldir
37+   804D 18 07            jr      leavit
38+   804F              fill:
39+   804F 41               ld      b,c
40+   8050              nxt1:
41+   8050 3A 33 5B         ld      a,(consts.TEST_23347)   ; (23347) is placed in the bottom line of the screen
42+   8053 12               ld      (de),a
43+   8054 10 FA            djnz    nxt1
44+   8056              leavit:
45+   8056 E1               pop     hl      ; move to the second slice of each line,
46+   8057 D1               pop     de      ; and repeat the whole operation until
47+   8058 24               inc     h       ; all 8 slices of all 24 lines have been scrolled
48+   8059 7C               ld      a,h
49+   805A FE 48            cp      $48
50+   805C 38 CA            jr      c,nxslice
51+   805E              cleanup
52+   805E EB               ex      de,hl   ; clean up the printer buffer
53+   805F              nxt2:
54+   805F 73               ld      (hl),e
55+   8060 2C               inc     l
56+   8061 20 FC            jr      nz,nxt2
57+   8063 C9               ret
58+   8064
59+   8064                  endmodule
# file closed: webb_lib.asm
 9    8064
10    8064 C3 74 80         jp start
11    8067
12    8067              data:
13    8067 48 65 6C 6C      db "Hello World!",ENTER
13    806B 6F 20 57 6F
13    806F 72 6C 64 21
13    8073 0D
14    8074              DATA_LENGTH = $ - data
15    8074
16    8074              start:
17    8074 CD 0F 80         call screen.clear
18    8077 21 00 40         ld hl,$4000
19    807A 36 FF            ld (hl),$FF
20    807C 21 67 80         ld hl,data
21    807F 06 0D            ld b,DATA_LENGTH
22    8081              print_loop:
23    8081 7E               ld a,(hl)
24    8082 D7               rst $10
25    8083 23               inc hl
26    8084 10 FB            djnz print_loop
27    8086
28    8086 01 05 0A         ld bc,$0A05
29    8089 CD 00 80         call screen.get_loc
30    808C 36 81            ld (hl),%10000001
31    808E 01 05 0B         ld bc,$0B05
32    8091 CD 00 80         call screen.get_loc
33    8094 22 84 5C         ld ($5C84),hl
34    8097 3E 45            ld a,$45
35    8099 D7               rst $10
36    809A
37    809A CD 22 80         call webb.upws
38    809D CD 22 80         call webb.upws
39    80A0 CD 22 80         call webb.upws
40    80A3 CD 22 80         call webb.upws
41    80A6 C9               ret
42    80A7
43    80A7                  savesna "adams.sna",start
44    80A7
# file closed: adams.asm
